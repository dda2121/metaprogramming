package sk.tuke.meta.persistence.model.dao;

import ${package}.${className};
import sk.tuke.meta.persistence.PersistenceException;
import sk.tuke.meta.persistence.PersistenceManager;
import sk.tuke.meta.persistence.model.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.sql.Statement;

public class ${className}DAO implements DAO<${className}> {

    private final Connection connection;
    private final PersistenceManager manager;

    public ${className}DAO(Connection connection, PersistenceManager manager) {
        this.connection = connection;
        this.manager = manager;
    }

    @Override
    public void createTable() {
        ClassLoader classLoader = ${className}DAO.class.getClassLoader();
        InputStream inputStream = classLoader.getResourceAsStream("${className.toLowerCase()}.sql");
        if (inputStream != null) {
            executeScript(inputStream);
        } else {
            System.err.println("File not found!");
        }
    }

    @Override
    public Optional<${className}> get(long id) {
        return Optional.empty();
    }

    @Override
    public List<${className}> getAll() {
        return null;
    }

    @Override
    public void save(Object entity) {

    }

    @Override
    public void delete(Object entity) {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "DELETE FROM [${tableName}] WHERE ${idColumnName} = ?;");
            statement.setLong(1, ((${className}) entity).${idColumnGetter}());
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new PersistenceException(e);
        }
    }

    private void executeScript(InputStream inputStream) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = reader.readLine()) != null) {
                try {
                    Statement statement = connection.createStatement();
                    statement.execute(line);
                } catch (SQLException e) {
                    throw new PersistenceException("Error occurred when executing SQL statement: " + e.getMessage(), e);
                }
            }
        } catch (IOException e) {
            throw new PersistenceException("Error occurred when reading input stream: " + e.getMessage(), e);
        }
    }
}